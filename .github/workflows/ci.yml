name: CI build
on:
  pull_request:
  push:
    branches: [main]

# Checks if any concurrent jobs under the same pull request or branch are being executed
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-others:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Build plugin library (without ASYNC capability)
        run: make

      - name: Upload artifact - windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: libcontainer-win
          path: 'container.dll'

      - name: Upload artifact - osx
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: libcontainer-osx
          path: 'libcontainer.dylib'

  build-and-test:
    name: build-and-test-${{ matrix.arch }}
    # ubuntu24.04 for podman >= 4.x
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-24.04-arm') || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      # Needed by vcpkg caching
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      # Needed by containerd go package - build time dep, no runtime.
      - name: Install plugin deps
        run: sudo apt-get install -y --no-install-recommends libbtrfs-dev

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go-worker/go.mod
          cache-dependency-path: go-worker/go.sum

      - name: Build plugin library
        run: make
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: Upload artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: libcontainer-${{ matrix.arch }}
          path: 'libcontainer.so'

      # Needed by podman package - build and runtime dep.
      # For the go-worker library, it is only a runtime dep,
      # and is provided by plugin vcpkg configuration.
      - name: Install go-worker executable deps
        run: sudo apt-get install -y --no-install-recommends libgpgme-dev

      - name: Build go-worker executable
        run: make -C go-worker exe

      # Podman is not shipped by beta github arm64 runners:
      # https://github.com/actions/partner-runner-images/blob/main/images/arm-ubuntu-22-image.md#not-installed-software
      # Building tests fail with: "faccessat /home/runneradmin/.config/containers/storage.conf: permission denied"
      - name: Run tests (x64 only)
        if: matrix.arch == 'amd64'
        run: |
          systemctl --user start podman
          make test

  falco-tests:
    needs: [build-and-test]
    name: falco-tests-${{ matrix.arch }}
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-24.04-arm') || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    container:
      image: falcosecurity/falco:master-debian
    steps:
      - name: Download library
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: libcontainer-${{ matrix.arch }}
          path: /usr/share/falco/plugins/

      - name: Run falcosecurity/testing Falco tests
        uses: falcosecurity/testing@main
        with:
          test-falco: 'true'
          test-falcoctl: 'false'
          test-k8saudit: 'false'
          test-dummy: 'false'
          static: 'false'
          test-drivers: 'false'
          show-all: 'true'
          sudo: ''
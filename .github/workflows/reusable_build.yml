name: Build plugin on all supported platforms

on:
  workflow_call:
    inputs:
      run-tests:
        description: 'whether to also run tests'
        type: boolean
        required: false
        default: false

jobs:
  build-others:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest ]
        include:
          - os: windows-latest
            artifact-name: 'libcontainer-win'
            artifact-path: 'container.dll'
            test-path: 'build\test\Release\test.exe'
          - os: macos-latest
            artifact-name: 'libcontainer-osx'
            artifact-path: 'libcontainer.dylib'
            test-path: 'build/test/test'

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go-worker/go.mod
          cache-dependency-path: go-worker/go.sum

      - name: Build plugin library
        run: make

      - name: Upload artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

      - name: Run library test
        if: inputs.run-tests
        run: |
          cmake --build build --target test --parallel 6 --config Release
          ${{ matrix.test-path }}

  build-linux:
    name: build-linux-${{ matrix.arch }}
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-24.04-arm') || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go-worker/go.mod
          cache-dependency-path: go-worker/go.sum

      - name: Install zig
        uses: falcosecurity/libs/.github/actions/install-zig@master

      - name: Build plugin library
        run: make

      # Make sure we link the correct glibc version.
      - name: Test library glibc version
        run: |
          cd build
          objdump -T libcontainer.so | grep -Eo 'GLIBC_\S+' | sort -u -t "." -k1,1n -k2,2n -k3,3n
          linked_glibc=$(objdump -T libcontainer.so | grep -Eo 'GLIBC_\S+' | sort -u -t "." -k1,1n -k2,2n -k3,3n | tail -n1 | tr -d ')')
          if [ "$linked_glibc" != "GLIBC_2.17" ]; then
            echo "Expected glibc 2.17; found $linked_glibc"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: libcontainer-${{ matrix.arch }}
          path: 'libcontainer.so'

      - name: Run library test
        if: inputs.run-tests
        run: make -C build/ test && build/test/test

      # libbtrfs: needed by podman package - build dep.
      # libgpgme: needed by github.com/containers/image, build dep since our go build tags use opengpg instead.
      - name: Install go-worker test deps
        if: inputs.run-tests
        run: sudo apt-get install -y --no-install-recommends libbtrfs-dev libgpgme-dev

      - name: Build go-worker executable
        if: inputs.run-tests
        # Disable zig - we are not building an artifact anymore
        env:
          CC: ''
          CXX: ''
          AR: ''
          RANLIB: ''
        working-directory: ./go-worker
        run: make exe

      - name: Run go-worker tests
        if: inputs.run-tests
        # Disable zig - we are not building an artifact anymore
        env:
          CC: ''
          CXX: ''
          AR: ''
          RANLIB: ''
        working-directory: ./go-worker
        run: |
          systemctl --user start podman
          make test